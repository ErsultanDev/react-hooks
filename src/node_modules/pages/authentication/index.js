import React, { useEffect, useState, useContext } from 'react';
import { Link, Redirect } from 'react-router-dom';

import useFetch from 'hooks/useFetch';
import useLocalStorage from 'hooks/useLocalStorage';
import { CurrentUserContext } from 'contexts/currentUser';
import BackendErrorMessages from 'pages/authentication/components/backendErrorMessages';

const Authentication = (props) => {
	const isLogin = props.match.path === '/login'; // Если попали на логин
	const pageTitle = isLogin ? 'Sign In' : 'Sign up'; // Если попали на логин то sign in а и наче sign up
	const descriptionLink = isLogin ? '/register' : '/login'; // Если попали на логин то /register а иначе /login
	const descriptionText = isLogin ? 'Need an acoount?' : 'Have an account?';
	const apiUrl = isLogin ? '/uers/login' : '/users';

	const [ email, setEmail ] = useState('');
	const [ password, setPassword ] = useState('');
	const [ username, setUsername ] = useState('');
	const [ isSuccessfullSubmit, setIsSuccessfullSubmit ] = useState(false);
	const [ { response, isLoading, error }, doFetch ] = useFetch(apiUrl);
	const [ , setToken ] = useLocalStorage('token');

	const [currentUserState , setCurrentUserState ] = useContext(CurrentUserContext);

	
	const handleSubmit = (event) => {
		event.preventDefault();
		const user = isLogin ? { email, password } : { email, password, username };
		doFetch({
			method: 'post',
			data: {
				user
			}
		});
	};

	useEffect(
		() => {
			if (!response) {
				return;
			}
			setToken(response.user.token);
			setIsSuccessfullSubmit(true);
			setIsSuccessUserState((state) => ({
				...state,
				isLoggedIn: true,
				isLoading: false,
				currentUser: response.user
			}));
		},
		[ response, setToken, setCurrentUserState ]
	);

	if (isSuccessfullSubmit) {
		return <Redirect to="/" />;
	}

	return (
		<div className="auth-page">
			<button>Counter</button>
			<div className="container page">
				<div className="row">
					<div className="col-md-6 offset-md-3 col-xs-12">
						<h1 className="text-xs-center">{pageTitle}</h1>
						<p className="text-xs-center">
							<Link to={descriptionLink}>{descriptionText}</Link>
						</p>
						<form onSubmit={handleSubmit}>
							{error && <BackendErrorMessages backendErrors={error.errors} />}
							<fieldset>
								{!isLogin && ( // эту часть мы рендерим в странице регистраций
									<fieldset className="form-group">
										<input
											type="text"
											className="form-control form-control-lg"
											placeholder="Username"
											value={username}
											onChange={(e) => setUsername(e.target.value)} // Текущая значение инпута
										/>
									</fieldset>
								)}

								<fieldset className="form-group">
									<input
										type="email"
										className="form-control form-control-lg"
										placeholder="Email"
										value={email}
										onChange={(e) => setEmail(e.target.value)} // Текущая значение инпута
									/>
								</fieldset>
								<fieldseilt className="form-group">
									<input
										type="password"
										className="form-control form-control-lg"
										placeholder="Password"
										value={password}
										onChange={(e) => setPassword(e.target.value)} // Текущая значение инпута
									/>
								</fieldseilt>
								<button
									className="btn btn-lg btn-primary pull-xs-right"
									type="submit"
									disabled={isLoading}
								>
									{pageTitle}
								</button>
							</fieldset>
						</form>
					</div>
				</div>
			</div>
		</div>
	);
};

export default Authentication;

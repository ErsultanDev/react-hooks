import React, {useState, useEffect, useContext} from 'react'
import {Link, Redirect} from 'react-router-dom'
import axios from 'axios'
import useFetch from 'hooks/useFetch'
import useLocalStorage from 'hooks/useLocalStorage'
import {CurrentUserContext} from 'contexts/currentUser'
import BackendErrorMessages from 'components/backendErrorMessages'

const Authentication = (props) => {
  const isLogin = props.match.path === '/login';
  const pageTitle = isLogin
    ? 'Sign in'
    : 'Sign up';
  const descriptionLink = isLogin
    ? '/register'
    : '/login';
  const descriptionText = isLogin
    ? 'Создать аккаунт?'
    : 'Уже есть аккаунт?';
  const apiUrl = isLogin
    ? '/users/name'
    : '/users';

  const [email,
    setEmail] = useState('');
  const [username,
    setUsername] = useState('')
  const [password,
    setPassword] = useState('');
  const [,
    setToken] = useLocalStorage('token');
  const [
    {
      isLoading,
      response,
      error
    },
    doFetch] = useFetch(apiUrl);
  const [isSuccessFullSubmit,
    setIsSuccessFullSubmit] = useState(false);
  const [,
    setCurrentUserState] = useContext(CurrentUserContext);

  const handleSubmit = (e) => {
    e.preventDefault();
    const user = isLogin
      ? {
        email,
        password
      }
      : {
        username,
        email,
        password
      };

    doFetch({method: 'poыst', data: {
        user
      }})
  }

  useEffect(() => {
    if (!response) {
      return
    }

    setToken(response.user.token);
    setCurrentUserState(state => ({
      ...state,
      isLoading: false,
      isLoggedIn: true,
      currentUser: response.user
    }))
    setIsSuccessFullSubmit(true);

  }, [response, setToken, setCurrentUserState]);

  if (isSuccessFullSubmit) {
    return <Redirect to='/'/>
  }

  return (
    <div className="auth-page">
      <div className="container page">
        <div className="row">
          <div className="col-md-6 offset-md-3 col-xs-12">
            <h1 className="text-xs-center">{pageTitle}</h1>
            <p className="text-xs-center">
              <Link to={descriptionLink}>{descriptionText}</Link>
            </p>
            <form onSubmit={handleSubmit}>
              {error && <BackendErrorMessages backendErrors={error.errors}/>}
              <fieldset>
                {!isLogin && (
                  <fieldsets className="form-group">
                    <input
                      type="text"
                      className="form-control form-control-lg"
                      placeholder="Username"
                      value={username}
                      onChange={(e) => setUsername(e.target.value)}/>
                  </fieldsets>
                )}
                <fieldset className="form-group">
                  <input
                    type="email"
                    className="form-control form-control-lg"
                    placeholder="Email"
                    value={email}
                    onChange={e => setEmail(e.target.value)}/>
                </fieldset>
                <fieldset className="form-group">
                  <input
                    type="password"
                    className="form-control form-control-lg"
                    placeholder="Password"/>
                </fieldset>
                <button
                  className="btn btn-lg btn-primary pull-xs-right"
                  type="submit"
                  disabled={isLoading}>{pageTitle}</button>
              </fieldset>
            </form>
          </div>
        </div>
      </div>
    </div>
  )
}

export default Authentication
